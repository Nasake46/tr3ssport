import { 
  collection, 
  addDoc, 
  updateDoc, 
  getDoc, 
  getDocs, 
  doc, 
  query, 
  where, 
  orderBy, 
  Timestamp,
  writeBatch 
} from 'firebase/firestore';
import { firestore } from '@/firebase';
import { 
  Appointment,
  AppointmentParticipant,
  AppointmentFormData,
  AppointmentWithParticipants
} from '@/models/appointment';

const APPOINTMENTS_COLLECTION = 'appointments';
const PARTICIPANTS_COLLECTION = 'appointmentParticipants';

// Logs de debug au chargement du module
console.log('üîç SERVICE DEBUG - Module appointmentService charg√©');
console.log('üîç SERVICE DEBUG - APPOINTMENTS_COLLECTION:', APPOINTMENTS_COLLECTION);
console.log('üîç SERVICE DEBUG - PARTICIPANTS_COLLECTION:', PARTICIPANTS_COLLECTION);

/**
 * Nettoie les donn√©es pour Firestore en convertissant undefined en cha√Æne vide
 */
const cleanDataForFirestore = (data: any): any => {
  const cleaned = { ...data };
  
  // Convertir undefined en cha√Æne vide pour les champs string optionnels
  if (cleaned.description === undefined) cleaned.description = '';
  if (cleaned.location === undefined) cleaned.location = '';
  if (cleaned.notes === undefined) cleaned.notes = '';
  if (cleaned.sessionType === undefined) cleaned.sessionType = '';
  
  return cleaned;
};

/**
 * Cr√©e un nouveau rendez-vous avec ses participants
 */
export const createAppointment = async (
  formData: AppointmentFormData,
  userId: string,
  userEmail: string
): Promise<string> => {
  console.log('üèóÔ∏è CR√âATION RDV - D√©but avec donn√©es:', {
    ...formData,
    date: formData.date.toISOString(),
    userId,
    userEmail
  });
  
  try {
    // Nettoyer les donn√©es pour √©viter les valeurs undefined
    const cleanedFormData = cleanDataForFirestore(formData);
    
    // 1. Cr√©er le rendez-vous principal avec addDoc (plus simple et plus fiable)
    const appointmentData: Omit<Appointment, 'id'> = {
      createdBy: userId,
      type: cleanedFormData.type,
      sessionType: cleanedFormData.sessionType,
      description: cleanedFormData.description || '',
      location: cleanedFormData.location || '',
      date: Timestamp.fromDate(cleanedFormData.date) as any,
      notes: cleanedFormData.notes || '', // Convertir undefined en cha√Æne vide
      globalStatus: 'pending',
      createdAt: Timestamp.now() as any,
      updatedAt: Timestamp.now() as any,
    };
    
    console.log('üìù CR√âATION RDV - Donn√©es appointment pr√©par√©es:', appointmentData);
    
    const appointmentRef = await addDoc(collection(firestore, APPOINTMENTS_COLLECTION), appointmentData);
    const appointmentId = appointmentRef.id;
    
    console.log('‚úÖ CR√âATION RDV - Appointment cr√©√© avec ID:', appointmentId);
    
    // 2. Ajouter le cr√©ateur comme participant client
    const creatorParticipant: Omit<AppointmentParticipant, 'id'> = {
      appointmentId,
      userId,
      email: userEmail,
      role: 'client',
      status: 'accepted', // Le cr√©ateur est automatiquement accept√©
      joinedAt: Timestamp.now() as any,
    };
    
    await addDoc(collection(firestore, PARTICIPANTS_COLLECTION), creatorParticipant);
    console.log('‚úÖ CR√âATION RDV - Cr√©ateur ajout√© comme participant');
    
    // 3. Ajouter les coaches s√©lectionn√©s un par un
    for (let i = 0; i < formData.coachIds.length; i++) {
      const coachId = formData.coachIds[i];
      
      const coachParticipant: Omit<AppointmentParticipant, 'id'> = {
        appointmentId,
        userId: coachId,
        email: '', // On r√©cup√©rera l'email plus tard si n√©cessaire
        role: 'coach',
        status: 'pending',
      };
      
      await addDoc(collection(firestore, PARTICIPANTS_COLLECTION), coachParticipant);
      console.log(`‚úÖ CR√âATION RDV - Coach ${i + 1}/${formData.coachIds.length} ajout√©:`, coachId);
    }
    
    // 4. Ajouter les clients invit√©s (pour les rendez-vous de groupe)
    if (formData.type === 'group' && formData.invitedEmails && formData.invitedEmails.length > 0) {
      for (let i = 0; i < formData.invitedEmails.length; i++) {
        const email = formData.invitedEmails[i].trim();
        
        if (email) { // V√©rifier que l'email n'est pas vide
          const invitedClient: Omit<AppointmentParticipant, 'id'> = {
            appointmentId,
            email: email,
            role: 'client',
            status: 'pending',
          };
          
          await addDoc(collection(firestore, PARTICIPANTS_COLLECTION), invitedClient);
          console.log(`‚úÖ CR√âATION RDV - Client invit√© ${i + 1}/${formData.invitedEmails.length}:`, email);
        }
      }
    }
    
    console.log('üéâ CR√âATION RDV - Succ√®s complet! ID:', appointmentId);
    return appointmentId;
    
  } catch (error) {
    console.error('‚ùå CR√âATION RDV - Erreur compl√®te:', {
      message: error instanceof Error ? error.message : 'Erreur inconnue',
      stack: error instanceof Error ? error.stack : undefined,
      formData: {
        ...formData,
        date: formData.date.toISOString()
      },
      userId,
      userEmail
    });
    throw error;
  }
};

/**
 * R√©cup√®re les rendez-vous cr√©√©s par un client
 */
export const getAppointmentsByClient = async (userId: string): Promise<AppointmentWithParticipants[]> => {
  console.log('üìã R√âCUP√âRATION RDV CLIENT - D√©but pour:', userId);
  
  try {
    // R√©cup√©rer tous les rendez-vous cr√©√©s par le client
    const appointmentsQuery = query(
      collection(firestore, APPOINTMENTS_COLLECTION),
      where('createdBy', '==', userId)
      // orderBy('date', 'desc') // Temporairement retir√© car n√©cessite un index
    );
    
    const appointmentsSnapshot = await getDocs(appointmentsQuery);
    console.log(`üìã R√âCUP√âRATION RDV CLIENT - ${appointmentsSnapshot.size} rendez-vous trouv√©s`);
    
    if (appointmentsSnapshot.empty) {
      console.log('üìã R√âCUP√âRATION RDV CLIENT - Aucun rendez-vous trouv√©');
      return [];
    }
    
    const appointments: AppointmentWithParticipants[] = [];
    
    for (const appointmentDoc of appointmentsSnapshot.docs) {
      const appointmentData = appointmentDoc.data();
      const appointmentId = appointmentDoc.id;
      
      console.log(`üìã R√âCUP√âRATION RDV CLIENT - Traitement RDV:`, appointmentId);
      console.log(`üìã R√âCUP√âRATION RDV CLIENT - Donn√©es brutes appointmentData:`, appointmentData);
      console.log(`üìã R√âCUP√âRATION RDV CLIENT - startTime brut:`, appointmentData.startTime);
      console.log(`üìã R√âCUP√âRATION RDV CLIENT - endTime brut:`, appointmentData.endTime);
      
      // R√©cup√©rer les participants pour ce rendez-vous
      const participantsQuery = query(
        collection(firestore, PARTICIPANTS_COLLECTION),
        where('appointmentId', '==', appointmentId)
      );
      
      const participantsSnapshot = await getDocs(participantsQuery);
      const participants = participantsSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      })) as AppointmentParticipant[];
      
      const appointment: AppointmentWithParticipants = {
        id: appointmentId,
        ...appointmentData,
        date: appointmentData.date?.toDate() || new Date(),
        createdAt: appointmentData.createdAt?.toDate() || new Date(),
        updatedAt: appointmentData.updatedAt?.toDate() || new Date(),
        participants,
        coaches: participants.filter(p => p.role === 'coach'),
        clients: participants.filter(p => p.role === 'client'),
        // Exposer les heures pour le calendrier
        startTime: appointmentData.startTime,
        endTime: appointmentData.endTime,
        duration: appointmentData.duration
      } as any;
      
      appointments.push(appointment);
      console.log(`üìã R√âCUP√âRATION RDV CLIENT - RDV ajout√© avec ${participants.length} participants et heures:`, {
        startTime: appointmentData.startTime,
        endTime: appointmentData.endTime
      });
    }
    
    // Trier par date c√¥t√© client (du plus r√©cent au plus ancien)
    appointments.sort((a, b) => b.date.getTime() - a.date.getTime());
    
    console.log(`üìã R√âCUP√âRATION RDV CLIENT - Succ√®s! ${appointments.length} rendez-vous trait√©s`);
    return appointments;
    
  } catch (error) {
    console.error('‚ùå R√âCUP√âRATION RDV CLIENT - Erreur:', error);
    throw error;
  }
};

/**
 * R√©cup√®re les demandes de rendez-vous en attente pour un coach
 */
export const getPendingAppointmentsForCoach = async (coachId: string): Promise<AppointmentWithParticipants[]> => {
  console.log('üë®‚Äç‚öïÔ∏è R√âCUP√âRATION RDV COACH - D√©but pour:', coachId);
  
  try {
    // Trouver tous les participants o√π ce coach est en attente
    const participantsQuery = query(
      collection(firestore, PARTICIPANTS_COLLECTION),
      where('userId', '==', coachId),
      where('role', '==', 'coach'),
      where('status', '==', 'pending')
    );
    
    const participantsSnapshot = await getDocs(participantsQuery);
    console.log(`üë®‚Äç‚öïÔ∏è R√âCUP√âRATION RDV COACH - ${participantsSnapshot.size} participations en attente`);
    
    if (participantsSnapshot.empty) {
      console.log('üë®‚Äç‚öïÔ∏è R√âCUP√âRATION RDV COACH - Aucune demande en attente');
      return [];
    }
    
    const appointments: AppointmentWithParticipants[] = [];
    
    for (const participantDoc of participantsSnapshot.docs) {
      const participantData = participantDoc.data();
      const appointmentId = participantData.appointmentId;
      
      console.log(`üë®‚Äç‚öïÔ∏è R√âCUP√âRATION RDV COACH - Traitement RDV:`, appointmentId);
      
      // R√©cup√©rer le rendez-vous
      const appointmentDoc = await getDoc(doc(firestore, APPOINTMENTS_COLLECTION, appointmentId));
      if (!appointmentDoc.exists()) {
        console.warn(`üë®‚Äç‚öïÔ∏è R√âCUP√âRATION RDV COACH - RDV introuvable:`, appointmentId);
        continue;
      }
      
      const appointmentData = appointmentDoc.data();
      
      // R√©cup√©rer tous les participants pour ce rendez-vous
      const allParticipantsQuery = query(
        collection(firestore, PARTICIPANTS_COLLECTION),
        where('appointmentId', '==', appointmentId)
      );
      
      const allParticipantsSnapshot = await getDocs(allParticipantsQuery);
      const participants = allParticipantsSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      })) as AppointmentParticipant[];
      
      const appointment: AppointmentWithParticipants = {
        id: appointmentId,
        ...appointmentData,
        date: appointmentData.date?.toDate() || new Date(),
        createdAt: appointmentData.createdAt?.toDate() || new Date(),
        updatedAt: appointmentData.updatedAt?.toDate() || new Date(),
        participants,
        coaches: participants.filter(p => p.role === 'coach'),
        clients: participants.filter(p => p.role === 'client'),
      } as AppointmentWithParticipants;
      
      appointments.push(appointment);
      console.log(`üë®‚Äç‚öïÔ∏è R√âCUP√âRATION RDV COACH - RDV ajout√© avec ${participants.length} participants`);
    }
    
    console.log(`üë®‚Äç‚öïÔ∏è R√âCUP√âRATION RDV COACH - Succ√®s! ${appointments.length} demandes trouv√©es`);
    return appointments;
    
  } catch (error) {
    console.error('‚ùå R√âCUP√âRATION RDV COACH - Erreur:', error);
    throw error;
  }
};

/**
 * Met √† jour le statut d'un participant (accepter/refuser)
 */
export const updateParticipantStatus = async (
  participantId: string,
  status: 'accepted' | 'declined'
): Promise<void> => {
  console.log('üîÑ MAJ STATUT PARTICIPANT - D√©but:', { participantId, status });
  
  try {
    const participantRef = doc(firestore, PARTICIPANTS_COLLECTION, participantId);
    
    await updateDoc(participantRef, {
      status,
      joinedAt: status === 'accepted' ? Timestamp.now() : undefined,
    });
    
    console.log('‚úÖ MAJ STATUT PARTICIPANT - Succ√®s');
    
    // Optionnel: Mettre √† jour le statut global du rendez-vous
    // await updateAppointmentGlobalStatus(appointmentId);
    
  } catch (error) {
    console.error('‚ùå MAJ STATUT PARTICIPANT - Erreur:', error);
    throw error;
  }
};

/**
 * R√©cup√®re un rendez-vous sp√©cifique avec ses participants
 */
export const getAppointmentById = async (appointmentId: string): Promise<AppointmentWithParticipants | null> => {
  console.log('üîç R√âCUP√âRATION RDV UNIQUE - D√©but pour:', appointmentId);
  
  try {
    const appointmentDoc = await getDoc(doc(firestore, APPOINTMENTS_COLLECTION, appointmentId));
    
    if (!appointmentDoc.exists()) {
      console.log('üîç R√âCUP√âRATION RDV UNIQUE - RDV introuvable');
      return null;
    }
    
    const appointmentData = appointmentDoc.data();
    
    // R√©cup√©rer les participants
    const participantsQuery = query(
      collection(firestore, PARTICIPANTS_COLLECTION),
      where('appointmentId', '==', appointmentId)
    );
    
    const participantsSnapshot = await getDocs(participantsQuery);
    const participants = participantsSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    })) as AppointmentParticipant[];
    
    const appointment: AppointmentWithParticipants = {
      id: appointmentId,
      ...appointmentData,
      date: appointmentData.date?.toDate() || new Date(),
      createdAt: appointmentData.createdAt?.toDate() || new Date(),
      updatedAt: appointmentData.updatedAt?.toDate() || new Date(),
      participants,
      coaches: participants.filter(p => p.role === 'coach'),
      clients: participants.filter(p => p.role === 'client'),
    } as AppointmentWithParticipants;
    
    console.log(`üîç R√âCUP√âRATION RDV UNIQUE - Succ√®s avec ${participants.length} participants`);
    return appointment;
    
  } catch (error) {
    console.error('‚ùå R√âCUP√âRATION RDV UNIQUE - Erreur:', error);
    throw error;
  }
};

/**
 * R√©cup√®re les rendez-vous o√π un utilisateur est invit√© comme participant
 */
export const getAppointmentsByParticipant = async (userId: string, userEmail: string): Promise<AppointmentWithParticipants[]> => {
  console.log('üìã R√âCUP√âRATION RDV PARTICIPANT - D√©but pour:', { userId, userEmail });
  
  try {
    // Trouver tous les participants o√π cet utilisateur est invit√©
    const participantsQuery = query(
      collection(firestore, PARTICIPANTS_COLLECTION),
      where('userId', '==', userId),
      where('role', '==', 'client')
    );
    
    const participantsSnapshot = await getDocs(participantsQuery);
    console.log(`üìã R√âCUP√âRATION RDV PARTICIPANT - ${participantsSnapshot.size} participations trouv√©es par userId`);
    
    // √âgalement chercher par email pour les invitations o√π userId n'est pas encore d√©fini
    const participantsByEmailQuery = query(
      collection(firestore, PARTICIPANTS_COLLECTION),
      where('email', '==', userEmail),
      where('role', '==', 'client')
    );
    
    const participantsByEmailSnapshot = await getDocs(participantsByEmailQuery);
    console.log(`üìã R√âCUP√âRATION RDV PARTICIPANT - ${participantsByEmailSnapshot.size} participations trouv√©es par email`);
    
    // Combiner les r√©sultats et √©liminer les doublons
    const allParticipantDocs = [
      ...participantsSnapshot.docs,
      ...participantsByEmailSnapshot.docs.filter(emailDoc => 
        !participantsSnapshot.docs.find(userDoc => userDoc.id === emailDoc.id)
      )
    ];
    
    if (allParticipantDocs.length === 0) {
      console.log('üìã R√âCUP√âRATION RDV PARTICIPANT - Aucune participation trouv√©e');
      return [];
    }
    
    const appointments: AppointmentWithParticipants[] = [];
    const processedAppointmentIds = new Set<string>();
    
    for (const participantDoc of allParticipantDocs) {
      const participantData = participantDoc.data();
      const appointmentId = participantData.appointmentId;
      
      // √âviter de traiter le m√™me rendez-vous plusieurs fois
      if (processedAppointmentIds.has(appointmentId)) {
        continue;
      }
      processedAppointmentIds.add(appointmentId);
      
      console.log(`üìã R√âCUP√âRATION RDV PARTICIPANT - Traitement RDV:`, appointmentId);
      
      // R√©cup√©rer le rendez-vous
      const appointmentDoc = await getDoc(doc(firestore, APPOINTMENTS_COLLECTION, appointmentId));
      if (!appointmentDoc.exists()) {
        console.warn(`üìã R√âCUP√âRATION RDV PARTICIPANT - RDV introuvable:`, appointmentId);
        continue;
      }
      
      const appointmentData = appointmentDoc.data();
      
      // R√©cup√©rer tous les participants pour ce rendez-vous
      const allParticipantsQuery = query(
        collection(firestore, PARTICIPANTS_COLLECTION),
        where('appointmentId', '==', appointmentId)
      );
      
      const allParticipantsSnapshot = await getDocs(allParticipantsQuery);
      const participants = allParticipantsSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      })) as AppointmentParticipant[];
      
      const appointment: AppointmentWithParticipants = {
        id: appointmentId,
        ...appointmentData,
        date: appointmentData.date?.toDate() || new Date(),
        createdAt: appointmentData.createdAt?.toDate() || new Date(),
        updatedAt: appointmentData.updatedAt?.toDate() || new Date(),
        participants,
        coaches: participants.filter(p => p.role === 'coach'),
        clients: participants.filter(p => p.role === 'client'),
      } as AppointmentWithParticipants;
      
      appointments.push(appointment);
      console.log(`üìã R√âCUP√âRATION RDV PARTICIPANT - RDV ajout√© avec ${participants.length} participants`);
    }
    
    console.log(`üìã R√âCUP√âRATION RDV PARTICIPANT - Succ√®s! ${appointments.length} rendez-vous trouv√©s`);
    return appointments;
    
  } catch (error) {
    console.error('‚ùå R√âCUP√âRATION RDV PARTICIPANT - Erreur:', error);
    throw error;
  }
};

/**
 * R√©cup√®re tous les rendez-vous d'un client (cr√©√©s + invitations)
 * UTILISE LA VRAIE COLLECTION 'invitations' comme /invitations
 */
export const getAllAppointmentsForClient = async (userId: string, userEmail: string): Promise<AppointmentWithParticipants[]> => {
  console.log('üìã R√âCUP√âRATION TOUS RDV CLIENT - D√©but pour:', { userId, userEmail });
  
  try {
    // R√©cup√©rer les rendez-vous cr√©√©s par le client
    const createdAppointments = await getAppointmentsByClient(userId);
    console.log(`üìã R√âCUP√âRATION TOUS RDV CLIENT - ${createdAppointments.length} RDV cr√©√©s`);
    
    // R√©cup√©rer les invitations depuis la collection 'invitations' (comme /invitations)
    const invitedAppointments = await getInvitationsForCalendar(userId);
    console.log(`üìã R√âCUP√âRATION TOUS RDV CLIENT - ${invitedAppointments.length} RDV invit√©s (depuis collection invitations)`);
    
    // Combiner et √©liminer les doublons (au cas o√π un client s'inviterait lui-m√™me)
    const allAppointments = [...createdAppointments];
    const createdIds = new Set(createdAppointments.map(apt => apt.id));
    
    for (const invitedApt of invitedAppointments) {
      if (!createdIds.has(invitedApt.id)) {
        allAppointments.push(invitedApt);
      }
    }
    
    // Trier par date
    allAppointments.sort((a, b) => b.date.getTime() - a.date.getTime());
    
    console.log(`üìã R√âCUP√âRATION TOUS RDV CLIENT - Total: ${allAppointments.length} RDV (${createdAppointments.length} cr√©√©s + ${invitedAppointments.length} invit√©s)`);
    return allAppointments;
    
  } catch (error) {
    console.error('‚ùå R√âCUP√âRATION TOUS RDV CLIENT - Erreur:', error);
    throw error;
  }
};

/**
 * Fonction de test pour v√©rifier les exports
 */
export const testFunction = async (): Promise<void> => {
  console.log('üß™ FONCTION TEST - Appel√©e avec succ√®s');
  console.log('üß™ FONCTION TEST - firestore disponible:', !!firestore);
};

/**
 * R√©cup√®re les invitations depuis la collection 'invitations' comme sur la page /invitations
 * C'est la VRAIE fonction qui fonctionne !
 */
export const getInvitationsForCalendar = async (userId: string): Promise<AppointmentWithParticipants[]> => {
  console.log('üéØ INVITATIONS CALENDRIER - R√©cup√©ration pour userId:', userId);
  
  try {
    // Utiliser la M√äME logique que /invitations
    const invitationsQuery = query(
      collection(firestore, 'invitations'),
      where('invitedUserId', '==', userId)
    );

    const snapshot = await getDocs(invitationsQuery);
    console.log(`üéØ INVITATIONS CALENDRIER - ${snapshot.size} invitations trouv√©es`);
    
    const appointments: AppointmentWithParticipants[] = [];
    
    for (const docSnapshot of snapshot.docs) {
      const data = docSnapshot.data();
      console.log(`üéØ INVITATIONS CALENDRIER - Traitement invitation:`, {
        id: docSnapshot.id,
        appointmentId: data.appointmentId,
        status: data.status
      });
      
      // R√©cup√©rer les donn√©es du RDV associ√© (comme dans /invitations)
      try {
        const appointmentDoc = await getDoc(doc(firestore, 'appointments', data.appointmentId));
        if (appointmentDoc.exists()) {
          const aptData = appointmentDoc.data();
          console.log(`üéØ INVITATIONS CALENDRIER - Donn√©es aptData brutes:`, aptData);
          console.log(`üéØ INVITATIONS CALENDRIER - startTime brut:`, aptData.startTime);
          console.log(`üéØ INVITATIONS CALENDRIER - endTime brut:`, aptData.endTime);
          
          // R√©cup√©rer tous les participants pour ce rendez-vous
          const participantsQuery = query(
            collection(firestore, PARTICIPANTS_COLLECTION),
            where('appointmentId', '==', data.appointmentId)
          );
          
          const participantsSnapshot = await getDocs(participantsQuery);
          const participants = participantsSnapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data()
          })) as AppointmentParticipant[];
          
          const appointment: AppointmentWithParticipants = {
            id: data.appointmentId,
            ...aptData,
            date: aptData.date?.toDate() || new Date(),
            createdAt: aptData.createdAt?.toDate() || new Date(),
            updatedAt: aptData.updatedAt?.toDate() || new Date(),
            participants,
            coaches: participants.filter(p => p.role === 'coach'),
            clients: participants.filter(p => p.role === 'client'),
            // Ajouter le statut de l'invitation pour le calendrier
            invitationStatus: data.status,
            // Exposer les heures de d√©but et fin pour le calendrier
            startTime: aptData.startTime,
            endTime: aptData.endTime,
            duration: aptData.duration
          } as any;
          
          appointments.push(appointment);
          console.log(`üéØ INVITATIONS CALENDRIER - RDV ajout√©:`, {
            id: appointment.id,
            date: appointment.date.toISOString(),
            startTime: aptData.startTime,
            endTime: aptData.endTime,
            status: data.status
          });
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è INVITATIONS CALENDRIER - Impossible de r√©cup√©rer le RDV:', error);
      }
    }
    
    // Trier par date (plus r√©cent en premier)
    appointments.sort((a, b) => b.date.getTime() - a.date.getTime());
    
    console.log(`‚úÖ INVITATIONS CALENDRIER - ${appointments.length} RDV d'invitations r√©cup√©r√©s`);
    return appointments;
    
  } catch (error) {
    console.error('‚ùå INVITATIONS CALENDRIER - Erreur:', error);
    throw error;
  }
};

/**
 * Associe les invitations par email √† un utilisateur connect√©
 * √Ä appeler quand un utilisateur se connecte pour lier ses invitations
 */
export const linkUserToEmailInvitations = async (userId: string, userEmail: string): Promise<void> => {
  console.log('üîó LIAISON INVITATIONS - Fonction appel√©e avec:', { userId, userEmail });
  console.log('üîó LIAISON INVITATIONS - firestore disponible:', !!firestore);
  console.log('üîó LIAISON INVITATIONS - collection disponible:', !!collection);
  console.log('üîó LIAISON INVITATIONS - PARTICIPANTS_COLLECTION:', PARTICIPANTS_COLLECTION);
  console.log('üîó LIAISON INVITATIONS - D√©but pour:', { userId, userEmail });
  
  try {
    // D'abord, regarder TOUS les participants pour debug
    const allParticipantsQuery = query(collection(firestore, PARTICIPANTS_COLLECTION));
    const allParticipantsSnapshot = await getDocs(allParticipantsQuery);
    console.log(`üîó LIAISON DEBUG - Total participants dans la DB: ${allParticipantsSnapshot.size}`);
    
    // Afficher les 5 premiers pour debug
    allParticipantsSnapshot.docs.slice(0, 5).forEach((doc, index) => {
      const data = doc.data();
      console.log(`üîó LIAISON DEBUG - Participant ${index + 1}:`, {
        id: doc.id,
        email: data.email,
        userId: data.userId,
        role: data.role,
        appointmentId: data.appointmentId
      });
    });
    
    // Trouver tous les participants qui ont cet email 
    const participantsQuery = query(
      collection(firestore, PARTICIPANTS_COLLECTION),
      where('email', '==', userEmail)
    );
    
    const participantsSnapshot = await getDocs(participantsQuery);
    console.log(`üîó LIAISON INVITATIONS - ${participantsSnapshot.size} participants trouv√©s avec cet email`);
    
    // Afficher les participants trouv√©s pour debug
    participantsSnapshot.docs.forEach((doc, index) => {
      const data = doc.data();
      console.log(`üîó LIAISON DEBUG - Participant trouv√© ${index + 1}:`, {
        id: doc.id,
        email: data.email,
        userId: data.userId || 'PAS_D√âFINI',
        role: data.role,
        status: data.status,
        appointmentId: data.appointmentId
      });
    });
    
    if (participantsSnapshot.empty) {
      console.log('üîó LIAISON INVITATIONS - Aucune invitation √† lier');
      return;
    }
    
    // Filtrer ceux qui n'ont pas encore de userId ou ont un userId diff√©rent
    const participantsToUpdate = participantsSnapshot.docs.filter(doc => {
      const data = doc.data();
      return !data.userId || data.userId !== userId;
    });
    
    console.log(`üîó LIAISON INVITATIONS - ${participantsToUpdate.length} invitations √† lier`);
    
    if (participantsToUpdate.length === 0) {
      console.log('üîó LIAISON INVITATIONS - Toutes les invitations sont d√©j√† li√©es');
      return;
    }
    
    // Mettre √† jour chaque participant avec le userId
    const batch = writeBatch(firestore);
    
    participantsToUpdate.forEach(doc => {
      const participantRef = doc.ref;
      batch.update(participantRef, {
        userId: userId,
        updatedAt: Timestamp.now()
      });
    });
    
    await batch.commit();
    console.log(`‚úÖ LIAISON INVITATIONS - ${participantsToUpdate.length} invitations li√©es avec succ√®s`);
    
  } catch (error) {
    console.error('‚ùå LIAISON INVITATIONS - Erreur:', error);
    throw error;
  }
};

/**
 * Ajoute un lien Jitsi √† un rendez-vous
 */
export const addJitsiLinkToAppointment = async (appointmentId: string, jitsiLink: string): Promise<void> => {
  console.log('üé• JITSI LINK - Ajout du lien pour RDV:', appointmentId);
  
  try {
    const appointmentRef = doc(firestore, APPOINTMENTS_COLLECTION, appointmentId);
    
    await updateDoc(appointmentRef, {
      jitsiLink: jitsiLink,
      updatedAt: Timestamp.now()
    });
    
    console.log('‚úÖ JITSI LINK - Lien ajout√© avec succ√®s:', jitsiLink);
    
  } catch (error) {
    console.error('‚ùå JITSI LINK - Erreur ajout lien:', error);
    throw error;
  }
};

/**
 * R√©cup√®re le lien Jitsi d'un rendez-vous
 */
export const getJitsiLinkFromAppointment = async (appointmentId: string): Promise<string | null> => {
  console.log('üîç JITSI LINK - R√©cup√©ration du lien pour RDV:', appointmentId);
  
  try {
    const appointmentDoc = await getDoc(doc(firestore, APPOINTMENTS_COLLECTION, appointmentId));
    
    if (!appointmentDoc.exists()) {
      console.log('üîç JITSI LINK - RDV introuvable');
      return null;
    }
    
    const appointmentData = appointmentDoc.data();
    const jitsiLink = appointmentData.jitsiLink || null;
    
    console.log('‚úÖ JITSI LINK - Lien r√©cup√©r√©:', jitsiLink ? 'Pr√©sent' : 'Absent');
    return jitsiLink;
    
  } catch (error) {
    console.error('‚ùå JITSI LINK - Erreur r√©cup√©ration lien:', error);
    throw error;
  }
};

/**
 * G√©n√®re un QR code unique pour un rendez-vous
 */
export const generateQRCodeForAppointment = async (appointmentId: string): Promise<string> => {
  console.log('üì± QR CODE - G√©n√©ration pour RDV:', appointmentId);
  
  try {
    // V√©rifier d'abord que l'appointment existe et les conditions de temps
    console.log('üîç QR CODE - R√©cup√©ration appointment...');
    const appointmentDoc = await getDoc(doc(firestore, APPOINTMENTS_COLLECTION, appointmentId));
    
    if (!appointmentDoc.exists()) {
      console.log('‚ùå QR CODE - Rendez-vous introuvable');
      throw new Error('Rendez-vous introuvable');
    }
    
    const appointmentData = appointmentDoc.data();
    const appointmentDate = appointmentData.date.toDate();
    
    console.log('üìÖ QR CODE - Donn√©es appointment r√©cup√©r√©es:', {
      appointmentDate: appointmentDate.toISOString(),
      hasExistingToken: !!appointmentData.qrToken,
      qrStatus: appointmentData.qrStatus
    });
    
    // V√©rifier que nous sommes dans la fen√™tre de 30 minutes avant le RDV
    const canGenerate = canGenerateQRCode(appointmentDate);
    console.log('‚è∞ QR CODE - V√©rification timing:', {
      canGenerate,
      now: new Date().toISOString(),
      appointmentDate: appointmentDate.toISOString(),
      thirtyMinsBefore: new Date(appointmentDate.getTime() - 30 * 60 * 1000).toISOString()
    });
    
    if (!canGenerate) {
      console.log('‚ùå QR CODE - Trop t√¥t pour g√©n√©rer');
      throw new Error('Trop t√¥t pour g√©n√©rer le QR code (30 minutes avant requis)');
    }
    
    // V√©rifier si un QR code existe d√©j√†
    if (appointmentData.qrToken) {
      console.log('‚úÖ QR CODE - Token existant retourn√©:', appointmentData.qrToken.substring(0, 20) + '...');
      return appointmentData.qrToken;
    }
    
    // G√©n√©rer un token unique
    console.log('‚ö° QR CODE - G√©n√©ration nouveau token...');
    const timestamp = Date.now();
    const randomString = Math.random().toString(36).substring(2, 15);
    const qrToken = `${appointmentId}_${timestamp}_${randomString}`;
    
    console.log('üíæ QR CODE - Sauvegarde token...');
    console.log('üíæ QR CODE - Sauvegarde token...');
    // Sauvegarder le token dans l'appointment avec expiration
    const appointmentRef = doc(firestore, APPOINTMENTS_COLLECTION, appointmentId);
    
    await updateDoc(appointmentRef, {
      qrToken: qrToken,
      qrGeneratedAt: Timestamp.now(),
      qrStatus: 'generated', // generated, scanned, expired
      updatedAt: Timestamp.now()
    });
    
    console.log('‚úÖ QR CODE - Token g√©n√©r√© et sauvegard√© avec succ√®s:', qrToken.substring(0, 20) + '...');
    return qrToken;
    
  } catch (error) {
    console.error('‚ùå QR CODE - Erreur g√©n√©ration token:', error);
    throw error;
  }
};

/**
 * Valide et scanne un QR code
 */
export const scanQRCode = async (qrToken: string, coachId: string): Promise<{
  success: boolean, 
  message: string, 
  appointmentId?: string,
  clientName?: string,
  appointmentTime?: string,
  duration?: number,
  error?: string
}> => {
  console.log('üîç QR SCAN - Validation du token:', qrToken, 'par coach:', coachId);
  
  try {
    // Extraire l'appointmentId du token
    const appointmentId = qrToken.split('_')[0];
    
    if (!appointmentId) {
      return { success: false, message: 'QR code invalide' };
    }
    
    // R√©cup√©rer l'appointment
    const appointmentDoc = await getDoc(doc(firestore, APPOINTMENTS_COLLECTION, appointmentId));
    
    if (!appointmentDoc.exists()) {
      return { success: false, message: 'Rendez-vous introuvable' };
    }
    
    const appointmentData = appointmentDoc.data();
    
    // V√©rifier que le QR code correspond
    if (appointmentData.qrToken !== qrToken) {
      return { success: false, message: 'QR code expir√© ou invalide' };
    }
    
    // V√©rifier que le QR code n'a pas d√©j√† √©t√© scann√©
    if (appointmentData.qrStatus === 'scanned') {
      return { success: false, message: 'QR code d√©j√† utilis√©' };
    }
    
    // V√©rifier la fen√™tre de temps (30 min avant √† fin du RDV)
    const appointmentDate = appointmentData.date.toDate();
    const now = new Date();
    const thirtyMinsBefore = new Date(appointmentDate.getTime() - 30 * 60 * 1000);
    
    // Calculer la fin du RDV (date + dur√©e)
    const duration = appointmentData.duration || 60; // dur√©e par d√©faut 60 min
    const appointmentEnd = new Date(appointmentDate.getTime() + duration * 60 * 1000);
    
    if (now < thirtyMinsBefore) {
      return { success: false, message: 'Trop t√¥t pour commencer la s√©ance' };
    }
    
    if (now > appointmentEnd) {
      return { success: false, message: 'Cr√©neau de s√©ance expir√©' };
    }
    
    // V√©rifier que le coach est bien assign√© √† ce RDV
    const participantsQuery = query(
      collection(firestore, PARTICIPANTS_COLLECTION),
      where('appointmentId', '==', appointmentId),
      where('userId', '==', coachId),
      where('role', '==', 'coach')
    );
    
    const participantsSnapshot = await getDocs(participantsQuery);
    
    if (participantsSnapshot.empty) {
      return { success: false, message: 'Vous n\'√™tes pas assign√© √† cette s√©ance' };
    }
    
    // Tout est OK, marquer la s√©ance comme commenc√©e
    const batch = writeBatch(firestore);
    
    // Mettre √† jour l'appointment
    const appointmentRef = doc(firestore, APPOINTMENTS_COLLECTION, appointmentId);
    batch.update(appointmentRef, {
      qrStatus: 'scanned',
      sessionStartedAt: Timestamp.now(),
      sessionStartedBy: coachId,
      globalStatus: 'started',
      updatedAt: Timestamp.now()
    });
    
    await batch.commit();
    
    console.log('‚úÖ QR SCAN - S√©ance commenc√©e avec succ√®s');
    
    // Programmer la fin automatique de la s√©ance
    scheduleSessionEnd(appointmentId, duration);
    
    // R√©cup√©rer le nom du client
    let clientName = 'Client';
    try {
      const creatorDoc = await getDoc(doc(firestore, 'users', appointmentData.createdBy));
      if (creatorDoc.exists()) {
        const userData = creatorDoc.data();
        clientName = userData.displayName || userData.email || 'Client';
      }
    } catch (error) {
      console.warn('Impossible de r√©cup√©rer le nom du client:', error);
    }
    
    return { 
      success: true, 
      message: 'S√©ance commenc√©e avec succ√®s !',
      appointmentId: appointmentId,
      clientName: clientName,
      appointmentTime: appointmentDate.toISOString(),
      duration: duration
    };
    
  } catch (error) {
    console.error('‚ùå QR SCAN - Erreur validation:', error);
    return { 
      success: false, 
      message: 'Erreur lors de la validation',
      error: error instanceof Error ? error.message : 'Erreur inconnue'
    };
  }
};

/**
 * Marque manuellement la fin d'une s√©ance
 */
export const endSession = async (appointmentId: string, coachId: string): Promise<{success: boolean, message: string}> => {
  console.log('‚èπÔ∏è END SESSION SERVICE - D√âBUT endSession');
  console.log('‚èπÔ∏è END SESSION SERVICE - appointmentId:', appointmentId);
  console.log('‚èπÔ∏è END SESSION SERVICE - coachId:', coachId);
  console.log('‚èπÔ∏è END SESSION SERVICE - firestore disponible:', !!firestore);
  console.log('‚èπÔ∏è END SESSION SERVICE - APPOINTMENTS_COLLECTION:', APPOINTMENTS_COLLECTION);
  
  try {
    console.log('‚èπÔ∏è END SESSION SERVICE - Cr√©ation r√©f√©rence document...');
    const appointmentRef = doc(firestore, APPOINTMENTS_COLLECTION, appointmentId);
    console.log('‚èπÔ∏è END SESSION SERVICE - R√©f√©rence cr√©√©e:', appointmentRef.path);
    
    console.log('‚èπÔ∏è END SESSION SERVICE - Tentative mise √† jour document...');
    await updateDoc(appointmentRef, {
      sessionEndedAt: Timestamp.now(),
      sessionEndedBy: coachId,
      globalStatus: 'completed',
      updatedAt: Timestamp.now()
    });
    
    console.log('‚úÖ END SESSION SERVICE - Document mis √† jour avec succ√®s');
    console.log('‚úÖ END SESSION SERVICE - Retour r√©sultat success');
    return { success: true, message: 'S√©ance termin√©e avec succ√®s !' };
    
  } catch (error) {
    console.error('‚ùå END SESSION SERVICE - Erreur compl√®te:', error);
    console.error('‚ùå END SESSION SERVICE - Type erreur:', typeof error);
    console.error('‚ùå END SESSION SERVICE - Message erreur:', error instanceof Error ? error.message : 'Erreur non-Error');
    console.error('‚ùå END SESSION SERVICE - Stack trace:', error instanceof Error ? error.stack : 'Pas de stack');
    console.error('‚ùå END SESSION SERVICE - Param√®tres:', { appointmentId, coachId });
    
    return { 
      success: false, 
      message: `Erreur lors de la fin de s√©ance: ${error instanceof Error ? error.message : 'Erreur inconnue'}` 
    };
  }
};

/**
 * V√©rifie si un QR code peut √™tre g√©n√©r√© (30 min avant le RDV)
 */
export const canGenerateQRCode = (appointmentDate: Date): boolean => {
  const now = new Date();
  const thirtyMinsBefore = new Date(appointmentDate.getTime() - 30 * 60 * 1000);
  
  return now >= thirtyMinsBefore;
};

/**
 * V√©rifie l'√©tat d'un QR code
 */
export const getQRCodeStatus = async (appointmentId: string): Promise<{
  canGenerate: boolean;
  isGenerated: boolean;
  isScanned: boolean;
  timeUntilGeneration?: number;
  timeUntilExpiration?: number;
}> => {
  console.log('üîç QR STATUS - V√©rification pour RDV:', appointmentId);
  
  try {
    const appointmentDoc = await getDoc(doc(firestore, APPOINTMENTS_COLLECTION, appointmentId));
    
    if (!appointmentDoc.exists()) {
      console.log('‚ùå QR STATUS - RDV introuvable');
      return { canGenerate: false, isGenerated: false, isScanned: false };
    }
    
    const appointmentData = appointmentDoc.data();
    const appointmentDate = appointmentData.date.toDate();
    const now = new Date();
    const thirtyMinsBefore = new Date(appointmentDate.getTime() - 30 * 60 * 1000);
    
    console.log('üìÖ QR STATUS - Calculs de temps:', {
      now: now.toISOString(),
      appointmentDate: appointmentDate.toISOString(),
      thirtyMinsBefore: thirtyMinsBefore.toISOString(),
      nowTimestamp: now.getTime(),
      thirtyMinsBeforeTimestamp: thirtyMinsBefore.getTime(),
      canGenerateTime: now >= thirtyMinsBefore
    });
    
    const duration = appointmentData.duration || 60;
    const appointmentEnd = new Date(appointmentDate.getTime() + duration * 60 * 1000);
    
    const canGenerate = now >= thirtyMinsBefore;
    const isGenerated = !!appointmentData.qrToken;
    const isScanned = appointmentData.qrStatus === 'scanned';
    
    console.log('üìä QR STATUS - Donn√©es appointment:', {
      hasQrToken: !!appointmentData.qrToken,
      qrStatus: appointmentData.qrStatus,
      qrGeneratedAt: appointmentData.qrGeneratedAt?.toDate?.()?.toISOString?.()
    });
    
    const timeUntilGeneration = canGenerate ? 0 : Math.max(0, thirtyMinsBefore.getTime() - now.getTime());
    const timeUntilExpiration = Math.max(0, appointmentEnd.getTime() - now.getTime());
    
    const result = {
      canGenerate,
      isGenerated,
      isScanned,
      timeUntilGeneration,
      timeUntilExpiration
    };
    
    console.log('‚úÖ QR STATUS - R√©sultat:', result);
    
    return result;
    
  } catch (error) {
    console.error('‚ùå QR STATUS - Erreur:', error);
    return { canGenerate: false, isGenerated: false, isScanned: false };
  }
};

/**
 * Programme la fin automatique d'une s√©ance
 */
const scheduleSessionEnd = (appointmentId: string, durationMinutes: number) => {
  console.log(`‚è∞ SCHEDULE END - Programmation fin auto dans ${durationMinutes} min pour RDV:`, appointmentId);
  
  // Programmer la fin automatique
  const timeoutId = setTimeout(async () => {
    try {
      console.log(`‚è∞ AUTO END - V√©rification fin auto pour RDV:`, appointmentId);
      
      const appointmentRef = doc(firestore, APPOINTMENTS_COLLECTION, appointmentId);
      const appointmentDoc = await getDoc(appointmentRef);
      
      if (appointmentDoc.exists()) {
        const data = appointmentDoc.data();
        
        // Ne terminer automatiquement que si la s√©ance n'a pas d√©j√† √©t√© termin√©e manuellement
        if (data.globalStatus === 'started') {
          await updateDoc(appointmentRef, {
            sessionEndedAt: Timestamp.now(),
            globalStatus: 'completed',
            autoCompleted: true,
            updatedAt: Timestamp.now()
          });
          
          console.log('‚úÖ AUTO END - S√©ance termin√©e automatiquement:', appointmentId);
          
          // Notifier les clients connect√©s si n√©cessaire
          // TODO: Ajouter notification en temps r√©el
        } else {
          console.log('‚ÑπÔ∏è AUTO END - S√©ance d√©j√† termin√©e manuellement:', appointmentId);
        }
      } else {
        console.log('‚ö†Ô∏è AUTO END - RDV introuvable:', appointmentId);
      }
    } catch (error) {
      console.error('‚ùå AUTO END - Erreur fin automatique:', error);
    }
  }, durationMinutes * 60 * 1000);
  
  // Stocker l'ID du timeout pour pouvoir l'annuler si n√©cessaire
  // TODO: Impl√©menter un syst√®me de gestion des timeouts actifs
  console.log(`‚úÖ SCHEDULE END - Timeout programm√© avec ID:`, timeoutId);
};

/**
 * R√©cup√®re la session active pour un coach
 */
export const getActiveSessionForCoach = async (coachId: string): Promise<any | null> => {
  try {
    // Chercher les appointments o√π le coach a une session en cours
    const appointmentsQuery = query(
      collection(firestore, APPOINTMENTS_COLLECTION),
      where('globalStatus', '==', 'started'),
      where('sessionStartedBy', '==', coachId)
    );
    
    const snapshot = await getDocs(appointmentsQuery);
    
    if (snapshot.empty) {
      return null;
    }
    
    const docSnapshot = snapshot.docs[0];
    const data = docSnapshot.data();
    
    // R√©cup√©rer les infos du client
    let clientName = 'Client';
    try {
      const creatorDoc = await getDoc(doc(firestore, 'users', data.createdBy));
      if (creatorDoc.exists()) {
        const userData = creatorDoc.data() as any;
        clientName = userData.displayName || userData.email || 'Client';
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Impossible de r√©cup√©rer le nom du client:', error);
    }
    
    const sessionInfo = {
      appointmentId: docSnapshot.id,
      clientName: clientName,
      startTime: data.date.toDate(),
      expectedDuration: data.duration || 60,
      actualStartTime: data.sessionStartedAt.toDate(),
    };
    
    return sessionInfo;
    
  } catch (error) {
    console.error('‚ùå ACTIVE SESSION - Erreur:', error);
    return null;
  }
};
console.log('üîç SERVICE DEBUG - getAppointmentById d√©finie:', typeof getAppointmentById);
