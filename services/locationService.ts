import * as ExpoLocation from 'expo-location';
import { Alert } from 'react-native';
import { Location } from '@/models/coach';

/**
 * Demande la permission d'acc√®s √† la localisation
 */
export const requestLocationPermission = async (): Promise<boolean> => {
  try {
    console.log('üó∫Ô∏è Demande de permission de g√©olocalisation...');
    
    const { status } = await ExpoLocation.requestForegroundPermissionsAsync();
    
    if (status !== 'granted') {
      console.log('‚ùå Permission de g√©olocalisation refus√©e');
      Alert.alert(
        'Permission requise',
        'L\'acc√®s √† votre position est n√©cessaire pour filtrer les coachs par distance.',
        [{ text: 'OK' }]
      );
      return false;
    }
    
    console.log('‚úÖ Permission de g√©olocalisation accord√©e');
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors de la demande de permission:', error);
    return false;
  }
};

/**
 * Obtient la position actuelle de l'utilisateur
 */
export const getCurrentLocation = async (): Promise<Location | null> => {
  try {
    console.log('üó∫Ô∏è R√©cup√©ration de la position actuelle...');
    
    const hasPermission = await requestLocationPermission();
    if (!hasPermission) {
      return null;
    }
    
    const location = await ExpoLocation.getCurrentPositionAsync({
      accuracy: ExpoLocation.Accuracy.Balanced,
    });
    
    const userLocation: Location = {
      latitude: location.coords.latitude,
      longitude: location.coords.longitude,
    };
    
    console.log('‚úÖ Position obtenue:', userLocation);
    return userLocation;
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration de la position:', error);
    Alert.alert(
      'Erreur de g√©olocalisation',
      'Impossible de r√©cup√©rer votre position. V√©rifiez que la g√©olocalisation est activ√©e.',
      [{ text: 'OK' }]
    );
    return null;
  }
};

/**
 * Convertit une adresse en coordonn√©es g√©ographiques
 */
export const geocodeAddress = async (address: string): Promise<Location | null> => {
  try {
    console.log('üó∫Ô∏è G√©ocodage de l\'adresse:', address);
    
    const geocodedLocations = await ExpoLocation.geocodeAsync(address);
    
    if (geocodedLocations.length === 0) {
      console.log('‚ùå Aucune coordonn√©e trouv√©e pour cette adresse');
      return null;
    }
    
    const location: Location = {
      latitude: geocodedLocations[0].latitude,
      longitude: geocodedLocations[0].longitude,
    };
    
    console.log('‚úÖ Coordonn√©es trouv√©es:', location);
    return location;
  } catch (error) {
    console.error('‚ùå Erreur lors du g√©ocodage:', error);
    return null;
  }
};

/**
 * Convertit des coordonn√©es g√©ographiques en adresse
 */
export const reverseGeocode = async (location: Location): Promise<string | null> => {
  try {
    console.log('üó∫Ô∏è G√©ocodage inverse:', location);
    
    const addresses = await ExpoLocation.reverseGeocodeAsync(location);
    
    if (addresses.length === 0) {
      console.log('‚ùå Aucune adresse trouv√©e pour ces coordonn√©es');
      return null;
    }
    
    const address = addresses[0];
    const formattedAddress = [
      address.name,
      address.street,
      address.city,
      address.postalCode,
      address.country
    ].filter(Boolean).join(', ');
    
    console.log('‚úÖ Adresse trouv√©e:', formattedAddress);
    return formattedAddress;
  } catch (error) {
    console.error('‚ùå Erreur lors du g√©ocodage inverse:', error);
    return null;
  }
};

/**
 * V√©rifie si les services de localisation sont activ√©s
 */
export const isLocationServicesEnabled = async (): Promise<boolean> => {
  try {
    const enabled = await ExpoLocation.hasServicesEnabledAsync();
    console.log('üó∫Ô∏è Services de localisation activ√©s:', enabled);
    return enabled;
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des services de localisation:', error);
    return false;
  }
};
