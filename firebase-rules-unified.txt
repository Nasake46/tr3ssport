rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuth() { return request.auth != null; }
    function userDoc() { return get(/databases/$(database)/documents/users/$(request.auth.uid)); }
    function isAdmin() { return isAuth() && userDoc().data.role == 'admin'; }
    function appointment(appointmentId) { return get(/databases/$(database)/documents/appointments/$(appointmentId)); }
    function isCoachAssignedTo(appointmentId) {
      return isAuth() && (request.auth.uid in appointment(appointmentId).data.coachIds);
    }
    function appointmentUpdateAllowedFields() {
      // Champs modifiables côté coach/admin pour pilotage séance
      return ['globalStatus','sessionStartedAt','sessionStartedBy','sessionEndedAt','sessionEndedBy','updatedAt','startMode','qrStatus','attendanceSummary','presentCount','absentCount','totalClients','autoCompleted','endMode'];
    }
    function attendanceUpdatableFields() {
      // Champs qu'un coach/admin peut mettre à jour sur un participant (présence)
      return ['attendanceStatus','attendanceOrder','qrScannedAt','updatedAt','qrToken','qrGeneratedAt'];
    }
    function participantSelfUpdatableFields() {
      // Champs qu'un participant (client) peut modifier lui‑même
      //  - qrToken / qrGeneratedAt : génération QR participant
      //  - updatedAt : marquage technique
      //  - userId : liaison invitation (seulement si vide auparavant)
      return ['qrToken','qrGeneratedAt','updatedAt','userId'];
    }
    function onlyAllowedAppointmentChanges(oldData, newData) {
      let diff = oldData.diff(newData);
      return diff.addedKeys().size() == 0 &&
             diff.removedKeys().size() == 0 &&
             diff.changedKeys().hasOnly(appointmentUpdateAllowedFields());
    }
    function onlyAllowedAttendanceChanges(oldData, newData) {
      let diff = oldData.diff(newData);
      return diff.addedKeys().size() == 0 &&
             diff.removedKeys().size() == 0 &&
             diff.changedKeys().hasOnly(attendanceUpdatableFields());
    }
    function onlyAllowedParticipantSelfChanges(oldData, newData) {
      let diff = oldData.diff(newData);
      // userId ne peut être défini que s'il était absent auparavant
      return diff.addedKeys().size() == 0 &&
             diff.removedKeys().size() == 0 &&
             diff.changedKeys().hasOnly(participantSelfUpdatableFields()) &&
             (!diff.changedKeys().hasAny(['userId']) || oldData.userId == null || oldData.userId == '' ) &&
             // Interdictions : pas de changement sur rôle / appointmentId
             oldData.role == newData.role && oldData.appointmentId == newData.appointmentId;
    }

    match /users/{userId} {
      // Lecture ouverte à tout utilisateur authentifié (inclut observateurs)
      allow read: if request.auth != null;

      // Création : uniquement par l'utilisateur lui‑même, rôle limité (anti auto-création admin)
      allow create: if request.auth != null
        && request.auth.uid == userId
        && request.resource.data.role in ['user', 'coach'];

      // Mise à jour :
      allow update: if request.auth != null && (
        (
          request.auth.uid == userId &&
          request.resource.data.role == resource.data.role
        ) || (
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
        )
      ) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role != 'observer';

      // Suppression : réservée aux admins
      allow delete: if request.auth != null && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }

    // Ancienne collection éventuelle /participants — à restreindre si non utilisée
    match /participants/{participantDocId} {
      allow read: if isAuth();
      allow write: if false; // verrouillée (utiliser appointmentParticipants)
    }

    match /conversations/{conversationId} {
      allow read: if request.auth != null && request.auth.uid in resource.data.members;
      allow write: if request.auth != null && request.auth.uid in request.resource.data.members;

      match /messages/{messageId} {
        allow read, write: if isAuth();
      }
    }

    // SYSTÈME UNIFIÉ APPOINTMENTS (séances)
    match /appointments/{appointmentId} {
      allow create: if isAuth();
      allow read: if isAuth();
      allow update: if isAdmin() || ( isCoachAssignedTo(appointmentId) && onlyAllowedAppointmentChanges(resource.data, request.resource.data) );
      allow delete: if isAdmin();
    }

    // Participants des rendez-vous (présence)
    match /appointmentParticipants/{participantId} {
      allow read: if isAuth();
      allow create: if isAuth(); // création contrôlée côté appli (invitation / ajout coach)

      allow update: if isAdmin()
        || (
          // Coach assigné: modifications présence strictement limitées
          isCoachAssignedTo(request.resource.data.appointmentId) &&
          resource.data.appointmentId == request.resource.data.appointmentId &&
          resource.data.role == request.resource.data.role &&
          resource.data.userId == request.resource.data.userId &&
          onlyAllowedAttendanceChanges(resource.data, request.resource.data)
        )
        || (
          // Participant lui‑même (client) : génération de son QR ou liaison userId
          request.auth != null &&
          resource.data.role == 'client' &&
          (resource.data.userId == request.auth.uid || resource.data.userId == null || resource.data.userId == '') &&
          onlyAllowedParticipantSelfChanges(resource.data, request.resource.data)
        );

      // Suppression limitée (admin uniquement)
      allow delete: if isAdmin();
    }

    // coach_tags
    match /coach_tags/{tagId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.coachId;
      allow read: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == resource.data.coachId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.coachId;
    }

    match /contactRequests/{requestId} {
      allow create: if request.auth != null && request.resource.data.fromId == request.auth.uid;
      allow read: if request.auth != null && (resource.data.fromId == request.auth.uid || resource.data.toId == request.auth.uid);
      allow update: if request.auth != null && resource.data.toId == request.auth.uid && request.resource.data.status in ['accepted','rejected'];
      allow delete: if false;
    }

    // Invitations RDV (à durcir ensuite si besoin)
    match /invitations/{invitationId} {
      allow create: if isAuth();
      allow read: if isAuth();
      allow update: if isAuth();
      allow delete: if isAdmin();
    }

    match /coachApplications/{applicationId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && (userDoc().data.role == 'admin' || resource.data.userId == request.auth.uid);
      allow update, delete: if request.auth != null && userDoc().data.role == 'admin';
    }

    match /bans/{banId} {
      allow create, update, delete: if request.auth != null && userDoc().data.role == 'admin';
      allow read: if request.auth != null && (userDoc().data.role in ['admin','observer']);
    }

    // Règle par défaut (deny all)
    match /{document=**} {
      allow read, write: if false;
    }
  }
}